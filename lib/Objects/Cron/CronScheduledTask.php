<?php
/**
 * Contains \lib\Objects\Cron\CronScheduledTask class definition
 */
namespace lib\Objects\Cron;

/**
 * Represents cron task during and after its execution, from schedule to return.
 * The class attributes defined here are stored in database.
 */
final class CronScheduledTask extends CronTask
{
    /**
     * @var string UUID assigned to the task instance, should be unique per
     *      section and entrypoint
     */
    private $uuid;
    /**
     * @var string UUID of the CronScheduler task executing this task,
     *      null for scheduler
     */
    private $schedulerUuid;
    /**
     * @var integer Time in epoch seconds when the task has been scheduled,
     *      it should be floored to full minutes and compliant with cron string
     *      allowance
     */
    private $scheduledTime;
    /** @var integer Time in epoch seconds when the task has been started */
    private $startTime;
    /** @var integer Time in epoch seconds when the task has ended its work */
    private $endTime;
    /**
     * @var integer The result returned by task after call, should be
     *      boolean, translatable to boolean or null. True if the task succeded,
     *      false otherwise, null if the processing result was undefined
     */
    private $result;
    /**
     * @var string The output generated by task while working
     */
    private $output;
    /** @var boolean True if the output should be translated before display */
    private $translateOutput;
    /**
     * @var boolean True if there has been errors during the task processing and
     *      the task has not ended properly
     */
    private $failed;
    /** @var string Error message, should be set only if the task failed */
    private $errorMsg;
    /** @var boolean True if the error msg should be translated before display */
    private $translateErrorMsg;

    /**
     * The constructor if has parameter passed, sets the proper fields using the
     * parameter values
     *
     * @param CronTask $cronTask the cron task this task is created from
     */
    public function __construct(CronTask $cronTask = null)
    {
        if (!empty($cronTask)) {
            $this->setDisplayName($cronTask->getDisplayName());
            $this->setDescription($cronTask->getDescription());
            $this->setMaxHistory($cronTask->getMaxHistory());
            $this->setTtl($cronTask->getTtl());
            $this->setAllowConcurrent($cronTask->getAllowConcurrent());

            foreach(self::CRON_FIELDS as $name) {
                $this->values[$name] = $cronTask->getCronValues($name);
            }
        }
    }

    /**
     * Gives the UUID
     *
     * @return string the UUID
     */
    public function getUuid()
    {
        return $this->uuid;
    }

    /**
     * Sets the UUID
     *
     * @param string $uuid the UUID to set
     */
    public function setUuid($uuid)
    {
        $this->uuid = $uuid;
    }

    /**
     * Gives the scheduler UUID
     *
     * @return string the scheduler UUID
     */
    public function getSchedulerUuid()
    {
        return $this->schedulerUuid;
    }

    /**
     * Sets the scheduler UUID
     *
     * @param string $schedulerUuid the scheduler UUID to set
     */
    public function setSchedulerUuid($schedulerUuid)
    {
        $this->schedulerUuid = $schedulerUuid;
    }

    /**
     * Gives the scheduled time
     *
     * @return int the scheduled time
     */
    public function getScheduledTime()
    {
        return $this->scheduledTime;
    }

    /**
     * Sets the scheduled time
     *
     * @param int $scheduledTime the scheduled time to set
     */
    public function setScheduledTime($scheduledTime)
    {
        $this->scheduledTime = $scheduledTime;
    }

    /**
     * Gives the start time
     *
     * @return int the start time
     */
    public function getStartTime()
    {
        return $this->startTime;
    }

    /**
     * Sets the start time
     *
     * @param int $startTime the start time to set
     */
    public function setStartTime($startTime)
    {
        $this->startTime = $startTime;
    }

    /**
     * Gives the end time
     *
     * @return int the end time
     */
    public function getEndTime()
    {
        return $this->endTime;
    }

    /**
     * Sets the end time
     *
     * @param int $endTime the end time to set
     */
    public function setEndTime($endTime)
    {
        $this->endTime = $endTime;
    }

    /**
     * Gives the task result
     *
     * @return boolean the task result
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * Sets the task result
     *
     * @param boolean $result the result to set
     */
    public function setResult($result)
    {
        $this->result = $result;
    }

    /**
     * Gives the task output
     *
     * @return string the task output
     */
    public function getOutput()
    {
        return $this->output;
    }

    /**
     * Sets the task output
     *
     * @param string $output the task output to set
     */
    public function setOutput($output)
    {
        $this->output = $output;
    }

    /**
     * Gives the translate output flag
     *
     * @return boolean the translate output flag
     */
    public function getTranslateOutput()
    {
        return $this->translateOutput;
    }

    /**
     * Sets the translate output flag
     *
     * @param boolean $translateOutput the translate output flag to set
     */
    public function setTranslateOutput($translateOutput)
    {
        $this->translateOutput = $translateOutput;
    }

    /**
     * Gives flag marking if the task has failed
     *
     * @return int flag marking if the task has failed
     */
    public function getFailed()
    {
        return $this->failed;
    }

    /**
     * Sets the failed flag
     *
     * @param boolean $failed the failed flag to set
     */
    public function setFailed($failed)
    {
        $this->failed = $failed;
    }

    /**
     * Gives the error message
     *
     * @return int the error message
     */
    public function getErrorMsg()
    {
        return $this->errorMsg;
    }

    /**
     * Sets the error message
     *
     * @param string $errormsg the error message to set
     */
    public function setErrorMsg($errorMsg)
    {
        $this->errorMsg = $errorMsg;
    }

    /**
     * Gives the translate error message flag
     *
     * @return boolean the translate error message flag
     */
    public function getTranslateErrorMsg()
    {
        return $this->translateErrorMsg;
    }

    /**
     * Sets the translate error message flag
     *
     * @param boolean $translateErrorMsg the translate error message flag to set
     */
    public function setTranslateErrorMsg($translateErrorMsg)
    {
        $this->translateErrorMsg = $translateErrorMsg;
    }
}